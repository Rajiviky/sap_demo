package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
)

type JsonResponse struct {
	Id      int    `json:"id"`
	Message string `json:"message"`
}

func reverJson(w http.ResponseWriter, r *http.Request) {
	id := r.URL.Query().Get("id")
	message := r.URL.Query().Get("message")
	fmt.Println("id,", id)
	fmt.Println("message", message)

	if id == "" || message == "" {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	idInt, err := strconv.Atoi(id)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	revMsg := reverse(message)

	response := JsonResponse{
		Id:      idInt,
		Message: revMsg,
	}

	// Marshal the response into JSON
	jsonResponse, err := json.Marshal(response)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	// Set the response content type to JSON
	w.Header().Set("Content-Type", "application/json")

	// Write the JSON response to the client
	w.WriteHeader(http.StatusOK)
	w.Write(jsonResponse)
}

func reverse(message string) string {
	var revMsg string
	for i := len(message) - 1; i > -1; i-- {
		revMsg += string(message[i])
	}
	return revMsg
}

func main() {
	mux := http.NewServeMux()
	mux.HandleFunc("/reverJson", reverJson)
	http.ListenAndServe(":5000", mux)
}
